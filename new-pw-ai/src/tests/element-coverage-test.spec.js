// new-pw-ai/src/tests/element-coverage-test.spec.js

import { test, expect } from '../../coverage-lib/fixture.js';

test.describe('üéØ Element Coverage Test', () => {
  
  test('‚úÖ Cover top uncovered elements', async ({ page }) => {
    await test.step('Navigate to homepage', async () => {
      await page.goto('/');
      await expect(page).toHaveTitle(/Playwright/);
    });
    
    await test.step('Test Search element', async () => {
      // –ü–æ–∫—Ä—ã–≤–∞–µ–º Search‚åòK —ç–ª–µ–º–µ–Ω—Ç (—Ç–æ–ø #1 –∏–∑ –æ—Ç—á–µ—Ç–∞)
      const searchButton = page.locator('[aria-label="Search (Command+K)"]');
      if (await searchButton.isVisible()) {
        await searchButton.click();
        await page.keyboard.press('Escape'); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
        console.log('‚úÖ –ü–æ–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç: Search‚åòK');
      }
    });
    
    await test.step('Test Playwright logo', async () => {
      // –ü–æ–∫—Ä—ã–≤–∞–µ–º Playwright logo (—Ç–æ–ø #2 –∏–∑ –æ—Ç—á–µ—Ç–∞)  
      const playwrightLogo = page.locator('text=Playwright').first();
      if (await playwrightLogo.isVisible()) {
        await playwrightLogo.click();
        await page.waitForLoadState('networkidle');
        console.log('‚úÖ –ü–æ–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç: Playwright logo');
      }
    });
    
    await test.step('Test API navigation', async () => {
      // –ü–æ–∫—Ä—ã–≤–∞–µ–º API link (—Ç–æ–ø #4 –∏–∑ –æ—Ç—á–µ—Ç–∞)
      await page.goto('/');
      const apiLink = page.locator('text=API');
      if (await apiLink.isVisible()) {
        await apiLink.click();
        await page.waitForLoadState('networkidle');
        console.log('‚úÖ –ü–æ–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç: API link');
      }
    });
    
    await test.step('Test Node.js dropdown', async () => {
      // –ü–æ–∫—Ä—ã–≤–∞–µ–º Node.js dropdown (—Ç–æ–ø #5 –∏–∑ –æ—Ç—á–µ—Ç–∞)
      await page.goto('/');
      const nodeJsButton = page.locator('[role="button"]').filter({ hasText: 'Node.js' });
      if (await nodeJsButton.isVisible()) {
        await nodeJsButton.hover(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º dropdown
        await page.waitForTimeout(500);
        console.log('‚úÖ –ü–æ–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç: Node.js dropdown');
      }
    });
    
    await test.step('Test Community navigation', async () => {
      // –ü–æ–∫—Ä—ã–≤–∞–µ–º Community link (—Ç–æ–ø #9 –∏–∑ –æ—Ç—á–µ—Ç–∞)
      const communityLink = page.locator('text=Community');
      if (await communityLink.isVisible()) {
        await communityLink.click();
        await page.waitForLoadState('networkidle');
        console.log('‚úÖ –ü–æ–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç: Community link');
      }
    });
  });

  test('‚úÖ Cover language dropdown elements', async ({ page }) => {
    await test.step('Navigate and test language options', async () => {
      await page.goto('/');
      
      // –ü–æ–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —è–∑—ã–∫–æ–≤ –∏–∑ dropdown
      const nodeJsButton = page.locator('[role="button"]').filter({ hasText: 'Node.js' });
      if (await nodeJsButton.isVisible()) {
        await nodeJsButton.hover();
        await page.waitForTimeout(500);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º Python link
        const pythonLink = page.locator('.dropdown__link').filter({ hasText: 'Python' });
        if (await pythonLink.isVisible()) {
          await pythonLink.click();
          await page.waitForLoadState('networkidle');
          console.log('‚úÖ –ü–æ–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç: Python link');
        }
      }
    });
    
    await test.step('Test Java language option', async () => {
      await page.goto('/');
      
      const nodeJsButton = page.locator('[role="button"]').filter({ hasText: 'Node.js' });
      if (await nodeJsButton.isVisible()) {
        await nodeJsButton.hover();
        await page.waitForTimeout(500);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º Java link
        const javaLink = page.locator('.dropdown__link').filter({ hasText: 'Java' });
        if (await javaLink.isVisible()) {
          await javaLink.click();
          await page.waitForLoadState('networkidle');
          console.log('‚úÖ –ü–æ–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç: Java link');
        }
      }
    });
    
    await test.step('Test .NET language option', async () => {
      await page.goto('/');
      
      const nodeJsButton = page.locator('[role="button"]').filter({ hasText: 'Node.js' });
      if (await nodeJsButton.isVisible()) {
        await nodeJsButton.hover();
        await page.waitForTimeout(500);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º .NET link
        const dotnetLink = page.locator('.dropdown__link').filter({ hasText: '.NET' });
        if (await dotnetLink.isVisible()) {
          await dotnetLink.click();
          await page.waitForLoadState('networkidle');
          console.log('‚úÖ –ü–æ–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç: .NET link');
        }
      }
    });
  });

  test('‚úÖ Cover GitHub and social elements', async ({ page }) => {
    await test.step('Navigate and test GitHub elements', async () => {
      await page.goto('/');
      
      // –ü–æ–∫—Ä—ã–≤–∞–µ–º Star button
      const starButton = page.locator('[aria-label="Star microsoft/playwright on GitHub"]');
      if (await starButton.isVisible()) {
        await starButton.hover(); // –ù–µ –∫–ª–∏–∫–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ GitHub
        console.log('‚úÖ –ü–æ–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç: Star button');
      }
      
      // –ü–æ–∫—Ä—ã–≤–∞–µ–º GitHub link –µ—Å–ª–∏ –µ—Å—Ç—å
      const githubLink = page.locator('a[href*="github.com"]').first();
      if (await githubLink.isVisible()) {
        await githubLink.hover();
        console.log('‚úÖ –ü–æ–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç: GitHub link');
      }
    });
  });

  test('‚úÖ Cover footer and additional elements', async ({ page }) => {
    await test.step('Navigate and scroll to footer', async () => {
      await page.goto('/');
      
      // –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ footer —ç–ª–µ–º–µ–Ω—Ç–∞–º
      await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
      await page.waitForTimeout(1000);
    });
    
    await test.step('Test footer elements', async () => {
      // –ò—â–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º footer —ç–ª–µ–º–µ–Ω—Ç—ã
      const footerLinks = page.locator('footer a');
      const count = await footerLinks.count();
      
      if (count > 0) {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –≤ footer
        for (let i = 0; i < Math.min(count, 3); i++) {
          const link = footerLinks.nth(i);
          if (await link.isVisible()) {
            const text = await link.textContent();
            await link.hover();
            console.log(`‚úÖ –ü–æ–∫—Ä—ã—Ç footer —ç–ª–µ–º–µ–Ω—Ç: ${text}`);
          }
        }
      }
    });
    
    await test.step('Test additional interactive elements', async () => {
      // –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const buttons = page.locator('button');
      const buttonCount = await buttons.count();
      
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${buttonCount} –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫
      for (let i = 0; i < Math.min(buttonCount, 5); i++) {
        const button = buttons.nth(i);
        if (await button.isVisible()) {
          const text = await button.textContent();
          await button.hover();
          console.log(`‚úÖ –ü–æ–∫—Ä—ã—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${text || '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}`);
        }
      }
    });
  });
});
