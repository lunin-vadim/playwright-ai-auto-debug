import { readdir, readFile, stat } from 'fs/promises';
import { join, dirname } from 'path';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–∞–π–ª–æ–º —Å –æ—à–∏–±–∫–∞–º–∏
 * @param {string} filename - –∏–º—è —Ñ–∞–π–ª–∞
 * @param {Array<string>} patterns - –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns {boolean}
 */
function isErrorFile(filename, patterns) {
  return patterns.some(pattern => {
    if (pattern.includes('*')) {
      // –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ wildcards
      const regex = new RegExp(pattern.replace(/\*/g, '.*'));
      return regex.test(filename);
    }
    return filename === pattern;
  });
}

/**
 * –ò—â–µ—Ç HTML –æ—Ç—á–µ—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
 * @param {string} errorFilePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –æ—à–∏–±–∫–æ–π
 * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI
 * @returns {Promise<string>} - –ø—É—Ç—å –∫ HTML –æ—Ç—á–µ—Ç—É
 */
async function findHtmlReport(errorFilePath, config) {
  const reportDir = config.report_dir || 'playwright-report';
  const resultsDir = config.results_dir || 'test-results';
  
  // –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ HTML –æ—Ç—á–µ—Ç—É (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
  const possiblePaths = [
    // 1. –í –ø–∞–ø–∫–µ playwright-report (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
    join(reportDir, 'index.html'),
    
    // 2. –í –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    'index.html',
    
    // 3. –í –ø–∞–ø–∫–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–æ–≤
    join(resultsDir, 'index.html'),
    
    // 4. –í —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —á—Ç–æ –∏ —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
    join(dirname(errorFilePath), 'index.html'),
    
    // 5. –í —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ —Ñ–∞–π–ª–∞ —Å –æ—à–∏–±–∫–æ–π
    join(dirname(dirname(errorFilePath)), 'index.html'),
    
    // 6. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ playwright-report
    join(reportDir, 'report.html'),
    join(reportDir, 'test-report.html')
  ];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—É—Ç—å
  for (const htmlPath of possiblePaths) {
    try {
      await stat(htmlPath);
      console.log(`üìÑ –ù–∞–π–¥–µ–Ω HTML –æ—Ç—á–µ—Ç: ${htmlPath}`);
      return htmlPath;
    } catch {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const defaultPath = join(reportDir, 'index.html');
  console.log(`‚ö†Ô∏è  HTML –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: ${defaultPath}`);
  return defaultPath;
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI —Å –ø—É—Ç–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
 * @returns {Promise<Array<{path: string, content: string, htmlPath: string}>>}
 */
async function findPromptFiles(config) {
  const dir = config.results_dir || 'test-results';
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ)
  const errorFilePatterns = config.error_file_patterns || [
    'copy-prompt.txt',      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–∞–π–ª Playwright
    'error-context.md',     // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    'error.txt',            // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    'test-error.md',        // Markdown —Å –æ—à–∏–±–∫–æ–π
    '*-error.txt',          // –§–∞–π–ª—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ -error.txt
    '*-error.md'            // –§–∞–π–ª—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ -error.md
  ];
  
  const prompts = [];
  
  try {
    const entries = await readdir(dir);
    
    for (const entry of entries) {
      const fullPath = join(dir, entry);
      const stats = await stat(fullPath);
      
      if (stats.isDirectory()) {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
        const subPrompts = await findPromptFilesRecursive(fullPath, errorFilePatterns, config);
        prompts.push(...subPrompts);
      } else if (isErrorFile(entry, errorFilePatterns)) {
        // –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
        const content = await readFile(fullPath, 'utf-8');
        
        // –ò—â–µ–º HTML –æ—Ç—á–µ—Ç
        const htmlPath = await findHtmlReport(fullPath, config);
        
        prompts.push({
          path: fullPath,
          content: content.trim(),
          htmlPath,
          fileType: entry.split('.').pop() // —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        });
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π: ${fullPath}`);
      }
    }
  } catch (error) {
    if (error.code === 'ENOENT') {
      console.log(`‚ö†Ô∏è  –ü–∞–ø–∫–∞ ${dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return [];
    }
    throw error;
  }
  
  return prompts;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
 * @param {string} dir - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param {Array<string>} errorFilePatterns - –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI
 * @returns {Promise<Array<{path: string, content: string, htmlPath: string}>>}
 */
async function findPromptFilesRecursive(dir, errorFilePatterns, config) {
  const prompts = [];
  
  try {
    const entries = await readdir(dir);
    
    for (const entry of entries) {
      const fullPath = join(dir, entry);
      const stats = await stat(fullPath);
      
      if (stats.isDirectory()) {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
        const subPrompts = await findPromptFilesRecursive(fullPath, errorFilePatterns, config);
        prompts.push(...subPrompts);
      } else if (isErrorFile(entry, errorFilePatterns)) {
        // –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
        const content = await readFile(fullPath, 'utf-8');
        
        // –ò—â–µ–º HTML –æ—Ç—á–µ—Ç
        const htmlPath = await findHtmlReport(fullPath, config);
        
        prompts.push({
          path: fullPath,
          content: content.trim(),
          htmlPath,
          fileType: entry.split('.').pop() // —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        });
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π: ${fullPath}`);
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–∞–ø–∫–∞–º
    console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É: ${dir}`);
  }
  
  return prompts;
}

export { findPromptFiles }; 