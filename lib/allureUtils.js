import { writeFileSync, mkdirSync, existsSync, readFileSync } from 'fs';
import { join } from 'path';
import { glob } from 'glob';

/**
 * Finds failed tests in Allure results and attaches AI response
 * @param {string} response - AI response content
 * @param {string} originalPrompt - original error prompt
 * @param {Object} config - AI configuration
 * @param {string} errorFilePath - path to error file for matching
 */
async function attachAiResponseToFailedTest(response, originalPrompt, config, errorFilePath = null) {
  if (!config.allure_integration) {
    return;
  }

  try {
    const allureDir = config.allure_results_dir || 'allure-results';
    
    if (!existsSync(allureDir)) {
      console.debug('Allure results directory not found, skipping integration');
      return;
    }

    // –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    const testResultFiles = await glob(join(allureDir, '*-result.json'));
    
    if (testResultFiles.length === 0) {
      console.debug('No test result files found in Allure directory');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã (failed, broken)
    const failedTests = [];
    
    for (const file of testResultFiles) {
      try {
        const content = readFileSync(file, 'utf8');
        const testResult = JSON.parse(content);
        
        // –°—Ç—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å - —Ç–æ–ª—å–∫–æ failed –∏ broken —Ç–µ—Å—Ç—ã
        if (testResult.status === 'failed' || testResult.status === 'broken') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É —Ç–µ—Å—Ç–∞ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
          const hasError = testResult.statusDetails && 
            (testResult.statusDetails.message || testResult.statusDetails.trace);
          
          if (hasError) {
            failedTests.push({
              file,
              result: testResult,
              errorMessage: testResult.statusDetails.message || '',
              errorTrace: testResult.statusDetails.trace || ''
            });
          }
        }
      } catch (parseError) {
        console.debug(`Failed to parse test result file ${file}: ${parseError.message}`);
        continue;
      }
    }

    if (failedTests.length === 0) {
      console.debug('No failed tests with errors found');
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è AI –æ—Ç–≤–µ—Ç–∞
    let targetTests = [];

    if (errorFilePath) {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ—Å—Ç –ø–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
      const errorFileName = errorFilePath.split('/').pop().replace(/\.[^/.]+$/, ''); // —É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      const errorKeywords = errorFileName.toLowerCase().split(/[^a-zA-Z0-9]+/).filter(Boolean);
      
      // –ò—â–µ–º —Ç–µ—Å—Ç—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
      const scoredTests = failedTests.map(test => {
        const testName = (test.result.name || test.result.fullName || '').toLowerCase();
        const testKeywords = testName.split(/[^a-zA-Z0-9]+/).filter(Boolean);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        let score = 0;
        errorKeywords.forEach(keyword => {
          if (testKeywords.some(testKeyword => 
            testKeyword.includes(keyword) || keyword.includes(testKeyword)
          )) {
            score++;
          }
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        if (test.errorMessage.toLowerCase().includes(errorFileName.toLowerCase())) {
          score += 2;
        }
        
        return { ...test, matchScore: score };
      });
      
      // –ë–µ—Ä–µ–º —Ç–µ—Å—Ç—ã —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å–∫–æ—Ä–æ–º (–º–∏–Ω–∏–º—É–º 1)
      const bestMatches = scoredTests.filter(test => test.matchScore > 0);
      if (bestMatches.length > 0) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É –∏ –±–µ—Ä–µ–º –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        bestMatches.sort((a, b) => b.matchScore - a.matchScore);
        const maxScore = bestMatches[0].matchScore;
        targetTests = bestMatches.filter(test => test.matchScore === maxScore);
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ—Å—Ç—ã –ø–æ —Ñ–∞–π–ª—É, –±–µ—Ä–µ–º –≤—Å–µ —É–ø–∞–≤—à–∏–µ
    if (targetTests.length === 0) {
      targetTests = failedTests.slice(0, 3); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ç–µ—Å—Ç–∞–º–∏
    }

    // –°–æ–∑–¥–∞–µ–º AI attachment –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
    for (const targetTest of targetTests) {
      await createAiAttachmentForTest(targetTest, response, originalPrompt, allureDir);
    }
    
    console.debug(`AI debug analysis attached to ${targetTests.length} failed test(s)`);
    
  } catch (error) {
    console.debug(`Allure integration error: ${error.message}`);
  }
}

/**
 * Creates AI attachment for a specific failed test
 * @param {Object} testData - test data with file and result
 * @param {string} response - AI response content
 * @param {string} originalPrompt - original error prompt
 * @param {string} allureDir - Allure results directory
 */
async function createAiAttachmentForTest(testData, response, originalPrompt, allureDir) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ AI attachment –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    const existingAiAttachment = testData.result.attachments?.find(att => 
      att.name && att.name.includes('AI Debug Analysis')
    );
    
    if (existingAiAttachment) {
      console.debug(`AI attachment already exists for test: ${testData.result.name}`);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è attachment
    const timestamp = Date.now();
    const testId = testData.result.uuid || testData.result.name?.replace(/[^a-zA-Z0-9]/g, '') || 'unknown';
    const attachmentId = `ai-debug-${testId}-${timestamp}`;
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ attachment –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
    const markdownContent = createAiAttachmentContent(testData.result, originalPrompt, response);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º attachment —Ñ–∞–π–ª
    const attachmentFileName = `${attachmentId}.md`;
    const attachmentPath = join(allureDir, attachmentFileName);
    writeFileSync(attachmentPath, markdownContent, 'utf8');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ attachments –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!testData.result.attachments) {
      testData.result.attachments = [];
    }

    // –î–æ–±–∞–≤–ª—è–µ–º attachment –∫ —Ç–µ—Å—Ç—É
    testData.result.attachments.push({
      name: 'ü§ñ AI Debug Analysis',
      source: attachmentFileName,
      type: 'text/markdown'
    });

    // –î–æ–±–∞–≤–ª—è–µ–º label –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if (!testData.result.labels) {
      testData.result.labels = [];
    }

    const hasAiLabel = testData.result.labels.some(label => label.name === 'ai-analyzed');
    if (!hasAiLabel) {
      testData.result.labels.push({
        name: 'ai-analyzed',
        value: 'true'
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    writeFileSync(testData.file, JSON.stringify(testData.result, null, 2), 'utf8');
    
    console.debug(`AI attachment created for test: ${testData.result.name}`);
    
  } catch (error) {
    console.debug(`Failed to create AI attachment for test ${testData.result.name}: ${error.message}`);
  }
}

/**
 * Creates formatted content for AI attachment
 * @param {Object} testResult - test result object
 * @param {string} originalPrompt - original error prompt
 * @param {string} response - AI response
 * @returns {string} formatted markdown content
 */
function createAiAttachmentContent(testResult, originalPrompt, response) {
  const timestamp = new Date().toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });

  let content = `# ü§ñ AI Debug Analysis\n\n`;
  content += `**Test Name:** ${testResult.name || 'Unknown'}\n`;
  content += `**Test Status:** ${testResult.status}\n`;
  content += `**Analysis Time:** ${timestamp}\n`;
  
  if (testResult.fullName && testResult.fullName !== testResult.name) {
    content += `**Full Name:** ${testResult.fullName}\n`;
  }
  
  content += `\n---\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (testResult.statusDetails) {
    content += `## üîç Error Details\n\n`;
    
    if (testResult.statusDetails.message) {
      content += `**Error Message:**\n\`\`\`\n${testResult.statusDetails.message}\n\`\`\`\n\n`;
    }
    
    if (testResult.statusDetails.trace) {
      content += `**Stack Trace:**\n\`\`\`\n${testResult.statusDetails.trace}\n\`\`\`\n\n`;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
  if (originalPrompt && originalPrompt.trim()) {
    content += `## üìù Original Error Context\n\n`;
    content += `\`\`\`\n${originalPrompt.trim()}\n\`\`\`\n\n`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º AI —Ä–µ—à–µ–Ω–∏–µ
  content += `## üí° AI Solution & Recommendations\n\n`;
  content += `${response}\n\n`;
  
  content += `---\n`;
  content += `*Generated by AI Debug Assistant*\n`;
  
  return content;
}

/**
 * Legacy function for backward compatibility - now just calls the main function
 * @deprecated Use attachAiResponseToFailedTest instead
 */
async function addAllureAttachmentToTest(response, originalPrompt, config, testName) {
  return attachAiResponseToFailedTest(response, originalPrompt, config, testName);
}

/**
 * Legacy function - no longer creates standalone results
 * @deprecated Standalone results are no longer created for seamless integration
 */
function createStandaloneAllureResult(response, originalPrompt, config, index = 0) {
  // –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
  console.debug('createStandaloneAllureResult is deprecated and does nothing');
  return;
}

export { attachAiResponseToFailedTest, addAllureAttachmentToTest, createStandaloneAllureResult }; 