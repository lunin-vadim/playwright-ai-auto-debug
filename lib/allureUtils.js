import { writeFileSync, mkdirSync, existsSync, readFileSync } from 'fs';
import { join } from 'path';
import { glob } from 'glob';

/**
 * Finds failed tests in Allure results and attaches AI response
 * @param {string} response - AI response content
 * @param {string} originalPrompt - original error prompt
 * @param {Object} config - AI configuration
 * @param {string} errorFilePath - path to error file for matching
 */
async function attachAiResponseToFailedTest(response, originalPrompt, config, errorFilePath = null) {
  if (!config.allure_integration) {
    return;
  }

  try {
    const allureDir = config.allure_results_dir || 'allure-results';
    
    if (!existsSync(allureDir)) {
      return; // –¢–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ –Ω–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    }

    // –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    const testResultFiles = await glob(join(allureDir, '*-result.json'));
    
    if (testResultFiles.length === 0) {
      return; // –¢–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    }

    // –ù–∞—Ö–æ–¥–∏–º —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã
    const failedTests = [];
    
    for (const file of testResultFiles) {
      try {
        const content = readFileSync(file, 'utf8');
        const testResult = JSON.parse(content);
        
        // –ò—â–µ–º —Ç–µ—Å—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º failed –∏–ª–∏ broken
        if (testResult.status === 'failed' || testResult.status === 'broken') {
          failedTests.push({
            file,
            result: testResult,
            content
          });
        }
      } catch {
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      }
    }

    if (failedTests.length === 0) {
      return; // –ù–µ—Ç —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
    }

    // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ—Å—Ç
    let targetTest = failedTests[0]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π —É–ø–∞–≤—à–∏–π

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    if (errorFilePath) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ç–µ—Å—Ç–∞ –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
      const errorFileName = errorFilePath.split('/').pop();
      const possibleTestName = errorFileName.replace(/[^a-zA-Z0-9]/g, '');
      
      const matchingTest = failedTests.find(test => {
        const testName = test.result.name || test.result.fullName || '';
        return testName.toLowerCase().includes(possibleTestName.toLowerCase()) ||
               possibleTestName.toLowerCase().includes(testName.toLowerCase().replace(/[^a-zA-Z0-9]/g, ''));
      });
      
      if (matchingTest) {
        targetTest = matchingTest;
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∞—Ç—Ç–∞—á–º–µ–Ω—Ç
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
    const attachmentId = `ai-debug-${timestamp}`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π Markdown —Ñ–∞–π–ª
    let markdownContent = `# ü§ñ AI Debug Analysis\n\n`;
    markdownContent += `**Test:** ${targetTest.result.name || 'Unknown'}\n`;
    markdownContent += `**Status:** ${targetTest.result.status}\n`;
    markdownContent += `**Generated:** ${new Date().toLocaleString('ru-RU')}\n\n`;
    markdownContent += `## üîç Error Details\n\n`;
    markdownContent += `\`\`\`\n${originalPrompt}\n\`\`\`\n\n`;
    markdownContent += `## üí° AI Solution\n\n`;
    markdownContent += `${response}\n`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ç—Ç–∞—á–º–µ–Ω—Ç
    const attachmentPath = join(allureDir, `${attachmentId}.md`);
    writeFileSync(attachmentPath, markdownContent, 'utf8');

    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ç–∞—á–º–µ–Ω—Ç –∫ —Ç–µ—Å—Ç—É
    if (!targetTest.result.attachments) {
      targetTest.result.attachments = [];
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ AI –∞—Ç—Ç–∞—á–º–µ–Ω—Ç–∞
    const hasAiAttachment = targetTest.result.attachments.some(att => 
      att.name && att.name.includes('AI Debug')
    );

    if (!hasAiAttachment) {
      targetTest.result.attachments.push({
        name: 'ü§ñ AI Debug Analysis',
        source: `${attachmentId}.md`,
        type: 'text/markdown'
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ–∑–∞–º–µ—Ç–Ω–æ)
      if (!targetTest.result.labels) {
        targetTest.result.labels = [];
      }

      const hasAiLabel = targetTest.result.labels.some(label => label.name === 'ai-debug');
      if (!hasAiLabel) {
        targetTest.result.labels.push({
          name: 'ai-debug',
          value: 'analyzed'
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
      writeFileSync(targetTest.file, JSON.stringify(targetTest.result, null, 2), 'utf8');
    }
    
  } catch (error) {
    // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Allure
    console.debug(`Allure integration error: ${error.message}`);
  }
}

/**
 * Legacy function for backward compatibility - now just calls the main function
 * @deprecated Use attachAiResponseToFailedTest instead
 */
async function addAllureAttachmentToTest(response, originalPrompt, config, testName) {
  return attachAiResponseToFailedTest(response, originalPrompt, config, testName);
}

/**
 * Legacy function - no longer creates standalone results
 * @deprecated Standalone results are no longer created for seamless integration
 */
function createStandaloneAllureResult(response, originalPrompt, config, index = 0) {
  // –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
  return;
}

export { attachAiResponseToFailedTest, addAllureAttachmentToTest, createStandaloneAllureResult }; 