// lib/sendToAI.js

import fs from 'fs';
import path from 'path';

/**
 * –°–æ–∑–¥–∞–µ—Ç Allure attachment —Å AI –æ—Ç–≤–µ—Ç–æ–º
 * @param {string} aiResponse - –æ—Ç–≤–µ—Ç AI
 * @param {string} errorContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏
 * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 * @param {number} index - –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞
 * @param {string} errorFilePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
 */
export async function createAllureAttachment(aiResponse, errorContent, config, index, errorFilePath) {
  try {
    const allureDir = config.allure_results_dir || 'allure-results';
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(allureDir)) {
      fs.mkdirSync(allureDir, { recursive: true });
    }
    
    const timestamp = Date.now();
    const attachmentName = `ai-analysis-${timestamp}-${index}.md`;
    const attachmentPath = path.join(allureDir, attachmentName);
    
    const content = createAllureAttachmentContent(aiResponse, errorContent, errorFilePath);
    
    fs.writeFileSync(attachmentPath, content, 'utf-8');
    
    console.log(`üìé Created Allure attachment: ${attachmentName}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º attachment –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ—Å—Ç—É –≤ Allure JSON
    await addAttachmentToAllureTest(allureDir, attachmentName, errorFilePath);
    
  } catch (error) {
    console.error(`‚ùå Failed to create Allure attachment: ${error.message}`);
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç AI attachment –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ—Å—Ç—É –≤ Allure JSON —Ñ–∞–π–ª–∞—Ö
 * @param {string} allureDir - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ Allure
 * @param {string} attachmentName - –∏–º—è —Ñ–∞–π–ª–∞ attachment
 * @param {string} errorFilePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
 */
async function addAttachmentToAllureTest(allureDir, attachmentName, errorFilePath) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    const files = fs.readdirSync(allureDir).filter(file => 
      file.endsWith('-result.json') && file !== 'environment.properties'
    );
    
    for (const file of files) {
      const filePath = path.join(allureDir, file);
      const data = fs.readFileSync(filePath, 'utf-8');
      const testResult = JSON.parse(data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç –Ω–∞—à–µ–º—É —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
      if (isMatchingTest(testResult, errorFilePath)) {
        // –î–æ–±–∞–≤–ª—è–µ–º AI attachment –∫ —Ç–µ—Å—Ç—É
        if (!testResult.attachments) {
          testResult.attachments = [];
        }
        
        testResult.attachments.push({
          name: "ü§ñ AI Analysis",
          source: attachmentName,
          type: "text/markdown"
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
        fs.writeFileSync(filePath, JSON.stringify(testResult, null, 2), 'utf-8');
        console.log(`‚úÖ Added AI attachment to test: ${testResult.name}`);
        return;
      }
    }
    
    console.log(`‚ö†Ô∏è  No matching test found for error file: ${errorFilePath}`);
    
  } catch (error) {
    console.error(`‚ùå Failed to add attachment to Allure test: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
 * @param {Object} testResult - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –∏–∑ Allure JSON
 * @param {string} errorFilePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
 * @returns {boolean}
 */
function isMatchingTest(testResult, errorFilePath) {
  if (!testResult || !errorFilePath) return false;
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
  const errorDir = path.basename(path.dirname(errorFilePath));
  
  console.log(`üîç Checking test match:`);
  console.log(`   Test name: "${testResult.name}"`);
  console.log(`   Test status: ${testResult.status}`);
  console.log(`   Error dir: "${errorDir}"`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å failed)
  if (testResult.status !== 'failed') {
    console.log(`   ‚ùå Test status is not 'failed'`);
    return false;
  }
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const normalizeString = (str) => str?.toLowerCase().replace(/[^\w\s]/g, '').replace(/\s+/g, '');
  
  const normalizedTestName = normalizeString(testResult.name);
  const normalizedErrorDir = normalizeString(errorDir);
  
  console.log(`   Normalized test name: "${normalizedTestName}"`);
  console.log(`   Normalized error dir: "${normalizedErrorDir}"`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ç–µ—Å—Ç–∞
  if (normalizedTestName && normalizedErrorDir && 
      (normalizedErrorDir.includes(normalizedTestName) || 
       normalizedTestName.includes(normalizedErrorDir))) {
    console.log(`   ‚úÖ Match found by test name`);
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ –∏–º–µ–Ω–∏ —Ç–µ—Å—Ç–∞
  const testWords = normalizedTestName?.split(/\s+/).filter(word => word.length > 2) || [];
  const errorWords = normalizedErrorDir?.split(/\s+/).filter(word => word.length > 2) || [];
  
  let matchingWords = 0;
  for (const testWord of testWords) {
    if (errorWords.some(errorWord => errorWord.includes(testWord) || testWord.includes(errorWord))) {
      matchingWords++;
    }
  }
  
  if (matchingWords >= 2) {
    console.log(`   ‚úÖ Match found by keywords (${matchingWords} matching words)`);
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ UUID –∏–ª–∏ –¥—Ä—É–≥–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
  if (errorDir.includes(testResult.uuid)) {
    console.log(`   ‚úÖ Match found by UUID`);
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π failed —Ç–µ—Å—Ç)
  if (testResult.status === 'failed') {
    console.log(`   ‚úÖ Match found - this is a failed test (fallback match)`);
    return true;
  }
  
  console.log(`   ‚ùå No match found`);
  return false;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç AI –æ—Ç–≤–µ—Ç –≤ markdown —Ñ–∞–π–ª
 * @param {string} aiResponse - –æ—Ç–≤–µ—Ç AI
 * @param {string} errorContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏
 * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 * @param {number} index - –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞
 */
export function saveResponseToMarkdown(aiResponse, errorContent, config, index) {
  try {
    const outputDir = config.ai_responses_dir || 'ai-responses';
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    const timestamp = Date.now();
    const filename = config.ai_response_filename_template 
      ? config.ai_response_filename_template
          .replace('{timestamp}', timestamp)
          .replace('{index}', index)
      : `ai-response-${timestamp}-${index}.md`;
    
    const filePath = path.join(outputDir, filename);
    
    const content = createMarkdownContent(aiResponse, errorContent, config);
    
    fs.writeFileSync(filePath, content, 'utf-8');
    
    console.log(`üìÑ Saved AI response: ${filename}`);
    
  } catch (error) {
    console.error(`‚ùå Failed to save markdown response: ${error.message}`);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Allure attachment
 */
function createAllureAttachmentContent(aiResponse, errorContent, errorFilePath) {
  const timestamp = new Date().toISOString();
  
  return `# ü§ñ AI Test Analysis

## üìä Analysis Details
- **Timestamp:** ${timestamp}
- **Error File:** ${errorFilePath || 'Unknown'}
- **Analysis Type:** Automated AI Debug

## üîç Detected Error
\`\`\`
${errorContent || 'No error content available'}
\`\`\`

## üí° AI Recommended Solution
${aiResponse || 'No AI response available'}

---
*Generated by playwright-ai-auto-debug*
`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç markdown —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 */
function createMarkdownContent(aiResponse, errorContent, config) {
  const timestamp = new Date().toISOString();
  
  let content = `# ü§ñ AI Analysis Report

**Generated:** ${timestamp}
**Configuration:** ${config.model || 'Unknown model'}

## üîç Error Analysis
\`\`\`
${errorContent || 'No error content'}
\`\`\`

## üí° AI Solution
${aiResponse || 'No AI response'}

`;

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
  if (config.include_metadata) {
    content += `
## üìã Metadata
- **API Server:** ${config.ai_server || 'Not specified'}
- **Model:** ${config.model || 'Not specified'}
- **Max Tokens:** ${config.max_tokens || 'Not specified'}
- **Temperature:** ${config.temperature || 'Not specified'}
- **Allure Integration:** ${config.allure_integration ? 'Enabled' : 'Disabled'}
- **MCP Integration:** ${config.mcp_integration ? 'Enabled' : 'Disabled'}
`;
  }

  content += '\n---\n*Generated by playwright-ai-auto-debug*\n';
  
  return content;
}

/**
 * Legacy —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export async function sendToAI(prompt, config, domSnapshot) {
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ legacy —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
  const { sendToAI: legacySendToAI } = await import('../src/infrastructure/legacy/LegacySendToAI.js');
  return await legacySendToAI(prompt, config, domSnapshot);
}
