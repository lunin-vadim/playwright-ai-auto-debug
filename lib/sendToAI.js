// lib/sendToAI.js

import fs from 'fs';
import path from 'path';

/**
 * –°–æ–∑–¥–∞–µ—Ç Allure attachment —Å AI –æ—Ç–≤–µ—Ç–æ–º
 * @param {string} aiResponse - –æ—Ç–≤–µ—Ç AI
 * @param {string} errorContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏
 * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 * @param {number} index - –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞
 * @param {string} errorFilePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
 */
export async function createAllureAttachment(aiResponse, errorContent, config, index, errorFilePath) {
  try {
    const allureDir = config.allure_results_dir || 'allure-results';
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(allureDir)) {
      fs.mkdirSync(allureDir, { recursive: true });
    }
    
    const timestamp = Date.now();
    const attachmentName = `ai-analysis-${timestamp}-${index}.md`;
    const attachmentPath = path.join(allureDir, attachmentName);
    
    const content = createAllureAttachmentContent(aiResponse, errorContent, errorFilePath);
    
    fs.writeFileSync(attachmentPath, content, 'utf-8');
    
    console.log(`üìé Created Allure attachment: ${attachmentName}`);
    
  } catch (error) {
    console.error(`‚ùå Failed to create Allure attachment: ${error.message}`);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç AI –æ—Ç–≤–µ—Ç –≤ markdown —Ñ–∞–π–ª
 * @param {string} aiResponse - –æ—Ç–≤–µ—Ç AI
 * @param {string} errorContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏
 * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 * @param {number} index - –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞
 */
export function saveResponseToMarkdown(aiResponse, errorContent, config, index) {
  try {
    const outputDir = config.ai_responses_dir || 'ai-responses';
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    const timestamp = Date.now();
    const filename = config.ai_response_filename_template 
      ? config.ai_response_filename_template
          .replace('{timestamp}', timestamp)
          .replace('{index}', index)
      : `ai-response-${timestamp}-${index}.md`;
    
    const filePath = path.join(outputDir, filename);
    
    const content = createMarkdownContent(aiResponse, errorContent, config);
    
    fs.writeFileSync(filePath, content, 'utf-8');
    
    console.log(`üìÑ Saved AI response: ${filename}`);
    
  } catch (error) {
    console.error(`‚ùå Failed to save markdown response: ${error.message}`);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Allure attachment
 */
function createAllureAttachmentContent(aiResponse, errorContent, errorFilePath) {
  const timestamp = new Date().toISOString();
  
  return `# ü§ñ AI Test Analysis

## üìä Analysis Details
- **Timestamp:** ${timestamp}
- **Error File:** ${errorFilePath || 'Unknown'}
- **Analysis Type:** Automated AI Debug

## üîç Detected Error
\`\`\`
${errorContent || 'No error content available'}
\`\`\`

## üí° AI Recommended Solution
${aiResponse || 'No AI response available'}

---
*Generated by playwright-ai-auto-debug*
`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç markdown —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 */
function createMarkdownContent(aiResponse, errorContent, config) {
  const timestamp = new Date().toISOString();
  
  let content = `# ü§ñ AI Analysis Report

**Generated:** ${timestamp}
**Configuration:** ${config.model || 'Unknown model'}

## üîç Error Analysis
\`\`\`
${errorContent || 'No error content'}
\`\`\`

## üí° AI Solution
${aiResponse || 'No AI response'}

`;

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
  if (config.include_metadata) {
    content += `
## üìã Metadata
- **API Server:** ${config.ai_server || 'Not specified'}
- **Model:** ${config.model || 'Not specified'}
- **Max Tokens:** ${config.max_tokens || 'Not specified'}
- **Temperature:** ${config.temperature || 'Not specified'}
- **Allure Integration:** ${config.allure_integration ? 'Enabled' : 'Disabled'}
- **MCP Integration:** ${config.mcp_integration ? 'Enabled' : 'Disabled'}
`;
  }

  content += '\n---\n*Generated by playwright-ai-auto-debug*\n';
  
  return content;
}

/**
 * Legacy —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export async function sendToAI(prompt, config, domSnapshot) {
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ legacy —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
  const { sendToAI: legacySendToAI } = await import('../src/infrastructure/legacy/LegacySendToAI.js');
  return await legacySendToAI(prompt, config, domSnapshot);
}
