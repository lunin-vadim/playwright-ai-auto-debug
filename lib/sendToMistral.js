import 'dotenv/config';

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ Mistral API –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∏–º–∞
 * @param {string} promptContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏ –∏–∑ copy-prompt.txt
 * @returns {Promise<string>} - –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
 */
async function sendToMistral(promptContent) {
  const apiKey = process.env.MISTRAL_API_KEY;
  
  if (!apiKey) {
    throw new Error('MISTRAL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  
  console.log('üîÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Mistral...');
  
  const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${apiKey}`
    },
    body: JSON.stringify({
      model: 'mistral-medium',
      messages: [
        {
          role: 'system',
          content: '–¢—ã AI –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ç–ª–∞–¥–∫–µ Playwright —Ç–µ—Å—Ç–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.'
        },
        {
          role: 'user',
          content: `–í–æ—Ç –æ—à–∏–±–∫–∞ –∏–∑ Playwright —Ç–µ—Å—Ç–∞:\n\n${promptContent}\n\n–ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã.`
        }
      ],
      stream: true
    })
  });
  
  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ Mistral API: ${response.status} ${response.statusText}`);
  }
  
  let fullResponse = '';
  const reader = response.body.getReader();
  const decoder = new TextDecoder();
  
  try {
    while (true) {
      const { done, value } = await reader.read();
      
      if (done) break;
      
      const chunk = decoder.decode(value);
      const lines = chunk.split('\n');
      
      for (const line of lines) {
        if (line.startsWith('data: ')) {
          const data = line.slice(6);
          
          if (data === '[DONE]') {
            break;
          }
          
          try {
            const parsed = JSON.parse(data);
            const content = parsed.choices?.[0]?.delta?.content;
            
            if (content) {
              fullResponse += content;
            }
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
          }
        }
      }
    }
  } finally {
    reader.releaseLock();
  }
  
  console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
  return fullResponse.trim();
}

export { sendToMistral }; 