import 'dotenv/config';
import { buildMessages } from './config.js';

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ AI API –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∏–º–∞
 * @param {string} promptContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏ –∏–∑ copy-prompt.txt
 * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI –∏–∑ playwright.config.js
 * @returns {Promise<string>} - –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
 */
async function sendToMistral(promptContent, config) {
  if (!config.api_key) {
    throw new Error('api_key –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI');
  }
  
  console.log('üîÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ AI...');
  
  const apiUrl = `${config.ai_server}/v1/chat/completions`;
  const messages = buildMessages(config, promptContent);
  
  const response = await fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${config.api_key}`
    },
    body: JSON.stringify({
      model: config.model,
      messages: messages,
      stream: true
    })
  });
  
  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ AI API: ${response.status} ${response.statusText}`);
  }
  
  let fullResponse = '';
  const reader = response.body.getReader();
  const decoder = new TextDecoder();
  
  try {
    while (true) {
      const { done, value } = await reader.read();
      
      if (done) break;
      
      const chunk = decoder.decode(value);
      const lines = chunk.split('\n');
      
      for (const line of lines) {
        if (line.startsWith('data: ')) {
          const data = line.slice(6);
          
          if (data === '[DONE]') {
            break;
          }
          
          try {
            const parsed = JSON.parse(data);
            const content = parsed.choices?.[0]?.delta?.content;
            
            if (content) {
              fullResponse += content;
            }
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
          }
        }
      }
    }
  } finally {
    reader.releaseLock();
  }
  
  console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
  return fullResponse.trim();
}

export { sendToMistral }; 