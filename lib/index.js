import { findPromptFiles } from './extractPrompts.js';
import { sendToMistral } from './sendToMistral.js';
import { updateHtmlReport } from './updateHtml.js';
import { loadAiConfig } from './config.js';

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ª–∞–¥–∫–∏ Playwright —Ç–µ—Å—Ç–æ–≤
 * @param {string} projectRoot - –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
 */
async function debugPlaywrightTests(projectRoot = process.cwd()) {
  try {
    // 0. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI
    console.log('‚öôÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI...');
    const config = await loadAiConfig(projectRoot);
    
    // 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
    console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏...');
    const prompts = await findPromptFiles(config);
    
    if (prompts.length === 0) {
      console.log('‚ÑπÔ∏è  –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${prompts.length} —Ñ–∞–π–ª(–æ–≤) —Å –æ—à–∏–±–∫–∞–º–∏\n`);
    
    // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç
    for (let i = 0; i < prompts.length; i++) {
      const { path, content, htmlPath } = prompts[i];
      
      console.log(`\nüìù –û–±—Ä–∞–±–æ—Ç–∫–∞ ${i + 1}/${prompts.length}: ${path}`);
      
      try {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        const maxLength = config.max_prompt_length || 2000;
        const truncatedContent = content.length > maxLength 
          ? content.substring(0, maxLength) + '\n...(—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–µ–∑–∞–Ω–æ)'
          : content;
        
        // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI
        const solution = await sendToMistral(truncatedContent, config);
        
        if (!solution) {
          console.log('‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI');
          continue;
        }
        
        // 4. –û–±–Ω–æ–≤–ª—è–µ–º HTML –æ—Ç—á–µ—Ç
        await updateHtmlReport(htmlPath, truncatedContent, solution);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
        if (i < prompts.length - 1) {
          const delay = config.request_delay || 1000;
          await new Promise(resolve => setTimeout(resolve, delay));
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${path}:`, error.message);
        continue;
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    throw error;
  }
}

export { debugPlaywrightTests }; 