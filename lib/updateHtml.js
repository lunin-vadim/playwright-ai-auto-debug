import { readFile, writeFile, access } from 'fs/promises';
import * as cheerio from 'cheerio';

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç HTML –æ—Ç—á–µ—Ç, –¥–æ–±–∞–≤–ª—è—è –±–ª–æ–∫ —Å AI-–æ—Ç–ª–∞–¥–∫–æ–π
 * @param {string} htmlPath - –ø—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É
 * @param {string} error - —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 * @param {string} solution - —Ä–µ—à–µ–Ω–∏–µ –æ—Ç AI
 */
async function updateHtmlReport(htmlPath, error, solution) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ HTML —Ñ–∞–π–ª–∞
    await access(htmlPath);
  } catch {
    console.log(`‚ö†Ô∏è  HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${htmlPath}`);
    return;
  }
  
  try {
    const htmlContent = await readFile(htmlPath, 'utf-8');
    const $ = cheerio.load(htmlContent);
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π AI debug –±–ª–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
    $('.ai-debug-section').remove();
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å Playwright
    const aiStyles = `
      <style>
        .ai-debug-section {
          background: white;
          border-radius: 8px;
          box-shadow: 0 2px 8px rgba(0,0,0,0.1);
          margin: 1rem 0;
          overflow: hidden;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
          border-left: 4px solid #667eea;
        }
        
        .ai-debug-header {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          padding: 1rem 1.5rem;
          margin: 0;
          font-size: 1.25rem;
          font-weight: 500;
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }
        
        .ai-debug-content {
          padding: 1.5rem;
        }
        
        .ai-error-section {
          margin-bottom: 1.5rem;
        }
        
        .ai-section-title {
          margin: 0 0 0.75rem 0;
          font-weight: 600;
          font-size: 0.875rem;
          text-transform: uppercase;
          letter-spacing: 0.5px;
          color: #dc3545;
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }
        
        .ai-solution-title {
          color: #28a745;
        }
        
        .ai-error-details {
          background: #f8d7da;
          border: 1px solid #f5c6cb;
          border-radius: 4px;
          padding: 1rem;
          font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
          font-size: 0.875rem;
          color: #721c24;
          white-space: pre-wrap;
          line-height: 1.4;
          overflow-x: auto;
        }
        
        .ai-solution-content {
          background: #d4edda;
          border: 1px solid #c3e6cb;
          border-radius: 4px;
          padding: 1rem;
          font-size: 0.875rem;
          color: #155724;
          line-height: 1.6;
          border-left: 4px solid #28a745;
        }
        
        .ai-solution-content p {
          margin: 0 0 0.75rem 0;
        }
        
        .ai-solution-content p:last-child {
          margin-bottom: 0;
        }
        
        .ai-solution-content code {
          background: rgba(0,0,0,0.1);
          padding: 0.125rem 0.25rem;
          border-radius: 3px;
          font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
          font-size: 0.8em;
        }
        
        .ai-solution-content pre {
          background: rgba(0,0,0,0.05);
          padding: 0.75rem;
          border-radius: 4px;
          margin: 0.5rem 0;
          overflow-x: auto;
          font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
          font-size: 0.8em;
        }
        
        @media (max-width: 768px) {
          .ai-debug-content {
            padding: 1rem;
          }
          
          .ai-debug-header {
            padding: 0.75rem 1rem;
            font-size: 1.1rem;
          }
        }
      </style>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if (!$('head').html().includes('ai-debug-section')) {
      $('head').append(aiStyles);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ—Ç AI –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const formattedSolution = formatAiSolution(solution);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ —Å AI –æ—Ç–ª–∞–¥–∫–æ–π –≤ —Å—Ç–∏–ª–µ Playwright
    const aiDebugHtml = `
      <div class="ai-debug-section">
        <h2 class="ai-debug-header">
          ü§ñ AI Debug Assistant
        </h2>
        <div class="ai-debug-content">
          <div class="ai-error-section">
            <div class="ai-section-title">
              ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
            </div>
            <div class="ai-error-details">${escapeHtml(error)}</div>
          </div>
          <div class="ai-solution-section">
            <div class="ai-section-title ai-solution-title">
              üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            </div>
            <div class="ai-solution-content">${formattedSolution}</div>
          </div>
        </div>
      </div>
    `;
    
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –±–ª–æ–∫–∞
    const insertionPoint = findInsertionPoint($);
    
    if (insertionPoint.length > 0) {
      insertionPoint.after(aiDebugHtml);
    } else {
      // Fallback: –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü container –∏–ª–∏ body
      if ($('.container').length > 0) {
        $('.container').append(aiDebugHtml);
      } else if ($('body').length > 0) {
        $('body').append(aiDebugHtml);
      } else {
        $('html').append(aiDebugHtml);
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML
    await writeFile(htmlPath, $.html(), 'utf-8');
    console.log(`üíæ HTML –æ–±–Ω–æ–≤–ª—ë–Ω: ${htmlPath}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ HTML ${htmlPath}:`, error.message);
  }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã
 * @param {string} text - —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} - —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function escapeHtml(text) {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ—Ç AI –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML
 * @param {string} solution - —Ä–µ—à–µ–Ω–∏–µ –æ—Ç AI
 * @returns {string} - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
 */
function formatAiSolution(solution) {
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
  let formatted = escapeHtml(solution);
  
  // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
  formatted = formatted
    .split('\n\n')
    .map(paragraph => paragraph.trim())
    .filter(paragraph => paragraph.length > 0)
    .map(paragraph => `<p>${paragraph.replace(/\n/g, '<br>')}</p>`)
    .join('');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥ –≤ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
  formatted = formatted.replace(/`([^`]+)`/g, '<code>$1</code>');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
  formatted = formatted.replace(/```([^`]+)```/g, '<pre>$1</pre>');
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω
  if (!formatted.includes('<p>')) {
    formatted = `<p>${formatted}</p>`;
  }
  
  return formatted;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ AI –±–ª–æ–∫–∞ –≤ HTML –æ—Ç—á–µ—Ç–µ
 * @param {CheerioAPI} $ - –æ–±—ä–µ–∫—Ç cheerio
 * @returns {Cheerio} - —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –±–ª–æ–∫
 */
function findInsertionPoint($) {
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è)
  const selectors = [
    '.test-results',           // –ë–ª–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–æ–≤
    '.summary',                // –ë–ª–æ–∫ —Å —Å—É–º–º–∞—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    '.test-item:last-child',   // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç
    '.container > *:last-child', // –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    'main > *:last-child',     // –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ main
    'body > *:last-child'      // –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ body
  ];
  
  for (const selector of selectors) {
    const element = $(selector);
    if (element.length > 0) {
      return element.last();
    }
  }
  
  return $(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
}

export { updateHtmlReport }; 