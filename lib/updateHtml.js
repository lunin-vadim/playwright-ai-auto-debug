import { readFile, writeFile, access } from 'fs/promises';
import * as cheerio from 'cheerio';

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç HTML –æ—Ç—á–µ—Ç, –¥–æ–±–∞–≤–ª—è—è –±–ª–æ–∫ —Å AI-–æ—Ç–ª–∞–¥–∫–æ–π
 * @param {string} htmlPath - –ø—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É
 * @param {string} error - —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 * @param {string} solution - —Ä–µ—à–µ–Ω–∏–µ –æ—Ç AI
 */
async function updateHtmlReport(htmlPath, error, solution) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ HTML —Ñ–∞–π–ª–∞
    await access(htmlPath);
  } catch {
    console.log(`‚ö†Ô∏è  HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${htmlPath}`);
    return;
  }
  
  try {
    const htmlContent = await readFile(htmlPath, 'utf-8');
    const $ = cheerio.load(htmlContent);
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π AI debug –±–ª–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
    $('.ai-debug').remove();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ —Å AI –æ—Ç–ª–∞–¥–∫–æ–π
    const aiDebugHtml = `
      <div class="ai-debug" style="border: 2px solid #4CAF50; border-radius: 8px; padding: 15px; margin: 20px 0; background-color: #f8f9fa; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;">
        <h3 style="color: #2E7D32; margin: 0 0 15px 0; font-size: 18px; display: flex; align-items: center;">
          üîç AI Debug
        </h3>
        <div style="margin-bottom: 15px;">
          <p style="margin: 0 0 8px 0; font-weight: 600; color: #d32f2f;">–û—à–∏–±–∫–∞:</p>
          <pre style="background: #ffebee; padding: 10px; border-radius: 4px; margin: 0; white-space: pre-wrap; font-size: 13px; color: #c62828; border-left: 4px solid #f44336;">${escapeHtml(error)}</pre>
        </div>
        <div>
          <p style="margin: 0 0 8px 0; font-weight: 600; color: #2E7D32;">–†–µ—à–µ–Ω–∏–µ –æ—Ç AI:</p>
          <div style="background: #e8f5e8; padding: 10px; border-radius: 4px; margin: 0; font-size: 14px; color: #1b5e20; border-left: 4px solid #4CAF50; line-height: 1.5;">${escapeHtml(solution).replace(/\n/g, '<br>')}</div>
        </div>
      </div>
    `;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ –∫–æ–Ω–µ—Ü body –∏–ª–∏ –≤ –∫–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if ($('body').length > 0) {
      $('body').append(aiDebugHtml);
    } else {
      $('html').append(aiDebugHtml);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML
    await writeFile(htmlPath, $.html(), 'utf-8');
    console.log(`üíæ HTML –æ–±–Ω–æ–≤–ª—ë–Ω: ${htmlPath}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ HTML ${htmlPath}:`, error.message);
  }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã
 * @param {string} text - —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} - —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function escapeHtml(text) {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

export { updateHtmlReport }; 