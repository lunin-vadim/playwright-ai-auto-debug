// example-new-architecture.js

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Playwright AI Auto-Debug
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
 * - Clean Architecture —Å Domain-Driven Design
 * - Dependency Injection –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
 * - Use Cases –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
 * - Rich domain entities
 * - Strategy Pattern –¥–ª—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */

import { CliApplication } from './src/presentation/cli/CliApplication.js';
import { getContainer } from './src/infrastructure/di/bindings.js';

async function demonstrateNewArchitecture() {
  console.log('üèóÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Playwright AI Auto-Debug\n');
  
  try {
    // ===== 1. DEPENDENCY INJECTION =====
    console.log('1Ô∏è‚É£  Dependency Injection Container');
    console.log('‚îÄ'.repeat(40));
    
    const container = getContainer();
    const info = container.getRegistrationInfo();
    
    console.log(`üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${info.bindings.length}`);
    console.log(`üîÑ Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: ${info.singletons.length}`);
    console.log(`üìã –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã: ${info.instances.length}`);
    console.log('‚úÖ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n');

    // ===== 2. DOMAIN ENTITIES =====
    console.log('2Ô∏è‚É£  Domain Entities');
    console.log('‚îÄ'.repeat(40));
    
    const { TestError } = await import('./src/domain/entities/TestError.js');
    const { AIResponse } = await import('./src/domain/entities/AIResponse.js');
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ–º–µ–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–∞
    const testError = new TestError(
      'tests/login.spec.js',
      'Error: expect(received).toBe(expected)',
      'assertion_error',
      'Login should work'
    );
    
    console.log(`üìÑ TestError ID: ${testError.id}`);
    console.log(`üîç Error Type: ${testError.errorType}`);
    console.log(`‚ö° Severity: ${testError.severity}`);
    console.log(`üè∑Ô∏è  Keywords: ${testError.keywords.join(', ')}`);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò
    const aiResponse = new AIResponse(
      'The test is failing because the login button selector is incorrect...',
      testError,
      { provider: 'mistral', confidence: 0.85 }
    );
    
    console.log(`ü§ñ AIResponse ID: ${aiResponse.id}`);
    console.log(`üéØ Confidence: ${aiResponse.confidence}`);
    console.log(`üé¨ Actions: ${aiResponse.actions.length}`);
    console.log(`üí° Recommendations: ${aiResponse.recommendations.length}`);
    console.log('‚úÖ Domain entities —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');

    // ===== 3. USE CASES =====
    console.log('3Ô∏è‚É£  Use Cases');
    console.log('‚îÄ'.repeat(40));
    
    try {
      const analyzeTestErrorsUseCase = await container.get('analyzeTestErrorsUseCase');
      console.log('‚úÖ AnalyzeTestErrorsUseCase –∑–∞–≥—Ä—É–∂–µ–Ω');
      
      const testDebugService = await container.get('testDebugService');
      console.log('‚úÖ TestDebugService –∑–∞–≥—Ä—É–∂–µ–Ω');
      
      try {
        const serviceInfo = testDebugService.getServiceInfo();
        console.log(`üìã Service: ${serviceInfo.name} v${serviceInfo.version}`);
        console.log(`üèóÔ∏è  Architecture: ${serviceInfo.architecture}`);
        console.log(`üéØ Patterns: ${serviceInfo.patterns.join(', ')}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  Service info: ${error.message}`);
      }
      
      // Health check
      try {
        const health = await testDebugService.healthCheck();
        console.log(`üíö Health Status: ${health.status.toUpperCase()}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  Health check: ${error.message}`);
      }
      console.log('‚úÖ Use Cases –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n');
      
    } catch (error) {
      console.log(`‚ö†Ô∏è  Use Cases: ${error.message}\n`);
    }

    // ===== 4. AI PROVIDERS =====
    console.log('4Ô∏è‚É£  AI Providers (Strategy Pattern)');
    console.log('‚îÄ'.repeat(40));
    
    try {
      const aiProvider = await container.get('aiProvider');
      console.log(`ü§ñ Provider: ${aiProvider.getProviderName()}`);
      console.log(`üß† Models: ${aiProvider.getSupportedModels().join(', ')}`);
      
      const validation = await aiProvider.validateConfiguration({ api_key: 'test' });
      console.log(`üîë Config Valid: ${validation.isValid}`);
      console.log('‚úÖ AI Provider –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n');
      
    } catch (error) {
      console.log(`‚ö†Ô∏è  AI Provider: ${error.message}\n`);
    }

    // ===== 5. CLI APPLICATION =====
    console.log('5Ô∏è‚É£  CLI Application');
    console.log('‚îÄ'.repeat(40));
    
    const app = new CliApplication(container);
    console.log('‚úÖ CLI Application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
    console.log('\nüìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    app.showGeneralHelp();

    // ===== 6. –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê =====
    console.log('\nüéâ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:');
    console.log('‚îÄ'.repeat(50));
    
    const benefits = [
      'üîß –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å: –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–µ–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
      'üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å: –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω—ä–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è, –ª–µ–≥–∫–æ –º–æ–∫–∞–µ—Ç—Å—è',
      'üì¶ –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å: –Ω–æ–≤—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞',
      'üéØ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ—è–º (Domain, Application, Infrastructure)',
      '‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: singleton –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
      'üõ°Ô∏è  –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è, –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö',
      'üîÄ –ì–∏–±–∫–æ—Å—Ç—å: –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ DI',
      'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ health checks –∏ –º–µ—Ç—Ä–∏–∫–∏'
    ];
    
    benefits.forEach(benefit => console.log(`  ${benefit}`));

    console.log('\nüöÄ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node src/main.js --help');
    
    // –û—á–∏—Å—Ç–∫–∞
    await app.dispose();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    if (process.env.DEBUG) {
      console.error(error.stack);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
demonstrateNewArchitecture().catch(console.error); 