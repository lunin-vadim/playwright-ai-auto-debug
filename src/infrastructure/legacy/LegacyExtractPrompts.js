// src/infrastructure/legacy/LegacyExtractPrompts.js

import fs from 'fs';
import path from 'path';
import { glob } from 'glob';

/**
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–æ–¥—É–ª—è extractPrompts
 * TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π ErrorRepository –≤ —Ä–∞–º–∫–∞—Ö Clean Architecture
 */

export async function findPromptFiles(config) {
  console.log('üîç Finding test error files...');
  
  try {
    const resultsDir = config.results_dir || 'test-results';
    const patterns = config.error_file_patterns || ['**/*.json', '**/*.html'];
    
    const files = [];
    
    for (const pattern of patterns) {
      let fullPattern;
      if (pattern.startsWith('**/')) {
        // –ü–∞—Ç—Ç–µ—Ä–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ resultsDir
        fullPattern = path.join(resultsDir, pattern);
      } else {
        // –û–±—ã—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Ñ–∞–π–ª–∞
        fullPattern = path.join(resultsDir, pattern);
      }
      
      console.log(`üîç Searching with pattern: ${fullPattern}`);
      const matchedFiles = await glob(fullPattern, { 
        cwd: process.cwd(),
        absolute: true 
      });
      
      console.log(`üìÅ Found ${matchedFiles.length} files with pattern: ${pattern}`);
      files.push(...matchedFiles);
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    const existingFiles = files.filter(file => {
      try {
        return fs.existsSync(file) && fs.statSync(file).isFile();
      } catch {
        return false;
      }
    });
    
    console.log(`üìÅ Found ${existingFiles.length} potential error files`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    return existingFiles.map(filePath => ({
      filePath,
      content: `Mock error content for ${path.basename(filePath)}`,
      errorType: 'test_failure',
      testName: path.basename(filePath, path.extname(filePath))
    }));
    
  } catch (error) {
    console.error('‚ùå Error finding files:', error.message);
    return [];
  }
} 