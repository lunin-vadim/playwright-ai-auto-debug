// src/infrastructure/legacy/LegacyExtractPrompts.js

import fs from 'fs';
import path from 'path';
import { glob } from 'glob';

/**
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–æ–¥—É–ª—è extractPrompts
 * TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π ErrorRepository –≤ —Ä–∞–º–∫–∞—Ö Clean Architecture
 */

export async function findPromptFiles(config) {
  console.log('üîç Finding test error files...');
  
  try {
    const resultsDir = config.results_dir || 'test-results';
    const patterns = config.error_file_patterns || ['**/error-context.md', 'copy-prompt.txt', 'error.txt'];
    
    const files = [];
    
    for (const pattern of patterns) {
      let fullPattern;
      
      // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å **/, —Ç–æ —ç—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
      if (pattern.startsWith('**/')) {
        // –ò—â–µ–º –≤–µ–∑–¥–µ, –Ω–∞—á–∏–Ω–∞—è —Å resultsDir
        fullPattern = path.join(resultsDir, pattern);
      } else if (pattern.includes('*')) {
        // –ü–∞—Ç—Ç–µ—Ä–Ω —Å wildcard - –∏—â–µ–º –≤ resultsDir
        fullPattern = path.join(resultsDir, '**', pattern);
      } else {
        // –ü—Ä–æ—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ - –∏—â–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤ resultsDir
        fullPattern = path.join(resultsDir, '**', pattern);
      }
      
      console.log(`üîç Searching with pattern: ${fullPattern}`);
      const matchedFiles = await glob(fullPattern, { 
        cwd: process.cwd(),
        absolute: true,
        ignore: ['**/node_modules/**'] 
      });
      
      console.log(`üìÅ Found ${matchedFiles.length} files with pattern: ${pattern}`);
      files.push(...matchedFiles);
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    const existingFiles = files.filter(file => {
      try {
        return fs.existsSync(file) && fs.statSync(file).isFile();
      } catch {
        return false;
      }
    });
    
    console.log(`üìÅ Found ${existingFiles.length} potential error files`);
    
    // –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    const fileContents = [];
    for (const filePath of existingFiles) {
      try {
        const content = fs.readFileSync(filePath, 'utf-8');
        fileContents.push({
          path: filePath,
          content,
          errorType: 'test_failure',
          testName: path.basename(filePath, path.extname(filePath))
        });
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Could not read file ${filePath}:`, error.message);
      }
    }
    
    return fileContents;
    
  } catch (error) {
    console.error('‚ùå Error finding files:', error.message);
    return [];
  }
} 